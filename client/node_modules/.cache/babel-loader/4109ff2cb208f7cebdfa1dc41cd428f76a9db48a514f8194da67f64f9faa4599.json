{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paulf\\\\OneDrive\\\\Desktop\\\\school_project\\\\project\\\\e-learning\\\\src\\\\pages\\\\test2.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport TaskForm from './form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction StudentDashboard() {\n  _s();\n  // Define the initial state of the tasks array, with taskId, taskName, taskLink, and taskStatus properties.\n  const [tasks, setTasks] = useState([{\n    taskId: 1,\n    taskName: 'Task 1',\n    taskLink: 'https://github.com/user/repo/issues/1',\n    taskStatus: 'in progress'\n  }, {\n    taskId: 2,\n    taskName: 'Task 2',\n    taskLink: 'https://github.com/user/repo/issues/2',\n    taskStatus: 'in progress'\n  }, {\n    taskId: 3,\n    taskName: 'Task 3',\n    taskLink: 'https://github.com/user/repo/issues/3',\n    taskStatus: 'in progress'\n  }]);\n\n  // Define the state variable for the selected task, which will be used to display the \"Finish Task\" form.\n  const [selectedTask, setSelectedTask] = useState(null);\n\n  // Event handler for the \"Finish\" button, which sets the selected task to be the task that was clicked.\n  const handleFinishTask = task => {\n    setSelectedTask(task);\n  };\n\n  // Event handler for the \"Submit\" button on the \"Finish Task\" form, which updates the tasks array with the completed task and pull request link.\n  const handleTaskSubmit = pullRequestLink => {\n    const updatedTasks = tasks.map(task => task.taskId === selectedTask.taskId ? {\n      ...task,\n      taskStatus: 'completed',\n      pullRequestLink\n    } : task);\n    setTasks(updatedTasks);\n    setSelectedTask(null);\n    // Send the completed task information to the code reviewer dashboard\n    sendCompletedTaskToCodeReviewer(selectedTask.taskId, selectedTask.taskName, selectedTask.taskLink, pullRequestLink);\n  };\n\n  // Function to send the completed task information to the code reviewer dashboard\n  const sendCompletedTaskToCodeReviewer = (taskId, taskName, taskLink, pullRequestLink) => {\n    // Here you can implement the logic to send the completed task information to the code reviewer dashboard.\n    console.log(`Task ${taskId} completed with pull request link: ${pullRequestLink}`);\n  };\n\n  // Render the table of tasks, with a button to \"Finish\" each in-progress task.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Student Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task Link\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.taskId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.taskName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: task.taskLink,\n              children: task.taskLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.taskStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.taskStatus === 'in progress' && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleFinishTask(task),\n              children: \"Finish\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, task.taskId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), selectedTask && /*#__PURE__*/_jsxDEV(TaskForm, {\n      selectedTask: selectedTask,\n      onTaskSubmit: handleTaskSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(StudentDashboard, \"JIh4/0jGa+ckhpyyd6Js6GPJx0c=\");\n_c = StudentDashboard;\nexport default StudentDashboard;\nvar _c;\n$RefreshReg$(_c, \"StudentDashboard\");","map":{"version":3,"names":["useState","TaskForm","jsxDEV","_jsxDEV","Fragment","_Fragment","StudentDashboard","_s","tasks","setTasks","taskId","taskName","taskLink","taskStatus","selectedTask","setSelectedTask","handleFinishTask","task","handleTaskSubmit","pullRequestLink","updatedTasks","map","sendCompletedTaskToCodeReviewer","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","href","onClick","onTaskSubmit","_c","$RefreshReg$"],"sources":["C:/Users/paulf/OneDrive/Desktop/school_project/project/e-learning/src/pages/test2.js"],"sourcesContent":["import { useState } from 'react';\r\nimport TaskForm from './form';\r\n\r\nfunction StudentDashboard() {\r\n  // Define the initial state of the tasks array, with taskId, taskName, taskLink, and taskStatus properties.\r\n  const [tasks, setTasks] = useState([\r\n    {\r\n      taskId: 1,\r\n      taskName: 'Task 1',\r\n      taskLink: 'https://github.com/user/repo/issues/1',\r\n      taskStatus: 'in progress',\r\n    },\r\n    {\r\n      taskId: 2,\r\n      taskName: 'Task 2',\r\n      taskLink: 'https://github.com/user/repo/issues/2',\r\n      taskStatus: 'in progress',\r\n    },\r\n    {\r\n      taskId: 3,\r\n      taskName: 'Task 3',\r\n      taskLink: 'https://github.com/user/repo/issues/3',\r\n      taskStatus: 'in progress',\r\n    },\r\n  ]);\r\n\r\n  // Define the state variable for the selected task, which will be used to display the \"Finish Task\" form.\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n\r\n  // Event handler for the \"Finish\" button, which sets the selected task to be the task that was clicked.\r\n  const handleFinishTask = (task) => {\r\n    setSelectedTask(task);\r\n  };\r\n\r\n  // Event handler for the \"Submit\" button on the \"Finish Task\" form, which updates the tasks array with the completed task and pull request link.\r\n  const handleTaskSubmit = (pullRequestLink) => {\r\n    const updatedTasks = tasks.map((task) =>\r\n      task.taskId === selectedTask.taskId\r\n        ? { ...task, taskStatus: 'completed', pullRequestLink }\r\n        : task\r\n    );\r\n    setTasks(updatedTasks);\r\n    setSelectedTask(null);\r\n    // Send the completed task information to the code reviewer dashboard\r\n    sendCompletedTaskToCodeReviewer(\r\n      selectedTask.taskId,\r\n      selectedTask.taskName,\r\n      selectedTask.taskLink,\r\n      pullRequestLink\r\n    );\r\n  };\r\n\r\n  // Function to send the completed task information to the code reviewer dashboard\r\n  const sendCompletedTaskToCodeReviewer = (\r\n    taskId,\r\n    taskName,\r\n    taskLink,\r\n    pullRequestLink\r\n  ) => {\r\n    // Here you can implement the logic to send the completed task information to the code reviewer dashboard.\r\n    console.log(\r\n      `Task ${taskId} completed with pull request link: ${pullRequestLink}`\r\n    );\r\n  };\r\n\r\n  // Render the table of tasks, with a button to \"Finish\" each in-progress task.\r\n  return (\r\n    <>\r\n      <h2>Student Dashboard</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Task ID</th>\r\n            <th>Task Name</th>\r\n            <th>Task Link</th>\r\n            <th>Status</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tasks.map((task) => (\r\n            <tr key={task.taskId}>\r\n              <td>{task.taskId}</td>\r\n              <td>{task.taskName}</td>\r\n              <td>\r\n                <a href={task.taskLink}>{task.taskLink}</a>\r\n              </td>\r\n              <td>{task.taskStatus}</td>\r\n              <td>\r\n                {task.taskStatus === 'in progress' && (\r\n                  <button onClick={() => handleFinishTask(task)}>Finish</button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {/* Render the \"Finish Task\" form if a task is selected */}\r\n      {selectedTask && (\r\n        <TaskForm selectedTask={selectedTask} onTaskSubmit={handleTaskSubmit} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StudentDashboard;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,QAAQ,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9B,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CACjC;IACEU,MAAM,EAAE,CAAC;IACTC,QAAQ,EAAE,QAAQ;IAClBC,QAAQ,EAAE,uCAAuC;IACjDC,UAAU,EAAE;EACd,CAAC,EACD;IACEH,MAAM,EAAE,CAAC;IACTC,QAAQ,EAAE,QAAQ;IAClBC,QAAQ,EAAE,uCAAuC;IACjDC,UAAU,EAAE;EACd,CAAC,EACD;IACEH,MAAM,EAAE,CAAC;IACTC,QAAQ,EAAE,QAAQ;IAClBC,QAAQ,EAAE,uCAAuC;IACjDC,UAAU,EAAE;EACd,CAAC,CACF,CAAC;;EAEF;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAMgB,gBAAgB,GAAIC,IAAI,IAAK;IACjCF,eAAe,CAACE,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAIC,eAAe,IAAK;IAC5C,MAAMC,YAAY,GAAGZ,KAAK,CAACa,GAAG,CAAEJ,IAAI,IAClCA,IAAI,CAACP,MAAM,KAAKI,YAAY,CAACJ,MAAM,GAC/B;MAAE,GAAGO,IAAI;MAAEJ,UAAU,EAAE,WAAW;MAAEM;IAAgB,CAAC,GACrDF,IACN,CAAC;IACDR,QAAQ,CAACW,YAAY,CAAC;IACtBL,eAAe,CAAC,IAAI,CAAC;IACrB;IACAO,+BAA+B,CAC7BR,YAAY,CAACJ,MAAM,EACnBI,YAAY,CAACH,QAAQ,EACrBG,YAAY,CAACF,QAAQ,EACrBO,eACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMG,+BAA+B,GAAGA,CACtCZ,MAAM,EACNC,QAAQ,EACRC,QAAQ,EACRO,eAAe,KACZ;IACH;IACAI,OAAO,CAACC,GAAG,CACR,QAAOd,MAAO,sCAAqCS,eAAgB,EACtE,CAAC;EACH,CAAC;;EAED;EACA,oBACEhB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1B1B,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,eACEtB,OAAA;UAAAsB,QAAA,gBACEtB,OAAA;YAAAsB,QAAA,EAAI;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChB1B,OAAA;YAAAsB,QAAA,EAAI;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClB1B,OAAA;YAAAsB,QAAA,EAAI;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClB1B,OAAA;YAAAsB,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACf1B,OAAA;YAAAsB,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACR1B,OAAA;QAAAsB,QAAA,EACGjB,KAAK,CAACa,GAAG,CAAEJ,IAAI,iBACdd,OAAA;UAAAsB,QAAA,gBACEtB,OAAA;YAAAsB,QAAA,EAAKR,IAAI,CAACP;UAAM;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACtB1B,OAAA;YAAAsB,QAAA,EAAKR,IAAI,CAACN;UAAQ;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxB1B,OAAA;YAAAsB,QAAA,eACEtB,OAAA;cAAG2B,IAAI,EAAEb,IAAI,CAACL,QAAS;cAAAa,QAAA,EAAER,IAAI,CAACL;YAAQ;cAAAc,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzC,CAAC,eACL1B,OAAA;YAAAsB,QAAA,EAAKR,IAAI,CAACJ;UAAU;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC1B1B,OAAA;YAAAsB,QAAA,EACGR,IAAI,CAACJ,UAAU,KAAK,aAAa,iBAChCV,OAAA;cAAQ4B,OAAO,EAAEA,CAAA,KAAMf,gBAAgB,CAACC,IAAI,CAAE;cAAAQ,QAAA,EAAC;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAC9D;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA,GAXEZ,IAAI,CAACP,MAAM;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAYhB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEPf,YAAY,iBACXX,OAAA,CAACF,QAAQ;MAACa,YAAY,EAAEA,YAAa;MAACkB,YAAY,EAAEd;IAAiB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACxE;EAAA,eACD,CAAC;AAEP;AAACtB,EAAA,CApGQD,gBAAgB;AAAA2B,EAAA,GAAhB3B,gBAAgB;AAsGzB,eAAeA,gBAAgB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}