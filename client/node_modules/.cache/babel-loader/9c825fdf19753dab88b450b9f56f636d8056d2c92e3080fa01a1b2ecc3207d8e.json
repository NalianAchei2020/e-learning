{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paulf\\\\OneDrive\\\\Desktop\\\\school_project\\\\project\\\\e-learning\\\\client\\\\src\\\\Context\\\\store.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useReducer, useState } from 'react';\nimport reducer, { initialState } from './reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StoreContext = /*#__PURE__*/createContext();\nexport const StoreProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [progress, setProgress] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [completedT, setCompletedT] = useState(0);\n  useEffect(() => {\n    localStorage.setItem('works', JSON.stringify(state.works));\n  }, [state.works]);\n  // Calculate progress percentage whenever works data changes\n  useEffect(() => {\n    const updatedWorks = state.works.map(module => {\n      const updatedBlocks = module.blocks.map(block => {\n        const totalTasks = block.days.reduce((acc, day) => acc + day.tasks.length, 0);\n        const completedTasks = block.days.reduce((acc, day) => acc + day.tasks.filter(task => task.status === 'Completed').length, 0);\n        return {\n          ...block,\n          totalTasks,\n          completedTasks\n        };\n      });\n      return {\n        ...module,\n        blocks: updatedBlocks\n      };\n    });\n    const totalTasks = updatedWorks.reduce((acc, module) => acc + module.blocks.reduce((blockAcc, block) => blockAcc + block.totalTasks, 0), 0);\n    const completedTasks = updatedWorks.reduce((acc, module) => acc + module.blocks.reduce((blockAcc, block) => blockAcc + block.completedTasks, 0), 0);\n    setCompletedT(completedTasks);\n    setTotal(totalTasks);\n    const percentage = completedTasks / totalTasks * 100;\n    setProgress(percentage);\n  }, [state.works]);\n  const updateTaskStatus = (taskIndex, newStatus) => {\n    dispatch({\n      type: 'UPDATE_TASK_STATUS',\n      payload: {\n        taskIndex,\n        newStatus\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(StoreContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      updateTaskStatus,\n      progress,\n      total,\n      completedT\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(StoreProvider, \"kgMJnUN/+Bw6irvrNZLq9eNptSI=\");\n_c = StoreProvider;\nvar _c;\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","useState","reducer","initialState","jsxDEV","_jsxDEV","StoreContext","StoreProvider","_ref","_s","children","state","dispatch","progress","setProgress","total","setTotal","completedT","setCompletedT","localStorage","setItem","JSON","stringify","works","updatedWorks","map","module","updatedBlocks","blocks","block","totalTasks","days","reduce","acc","day","tasks","length","completedTasks","filter","task","status","blockAcc","percentage","updateTaskStatus","taskIndex","newStatus","type","payload","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/paulf/OneDrive/Desktop/school_project/project/e-learning/client/src/Context/store.js"],"sourcesContent":["import { createContext, useEffect, useReducer, useState } from 'react';\r\nimport reducer, { initialState } from './reducer';\r\n\r\nexport const StoreContext = createContext();\r\n\r\nexport const StoreProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [progress, setProgress] = useState(0);\r\n  const [total, setTotal] = useState(0);\r\n  const [completedT, setCompletedT] = useState(0);\r\n  useEffect(() => {\r\n    localStorage.setItem('works', JSON.stringify(state.works));\r\n  }, [state.works]);\r\n  // Calculate progress percentage whenever works data changes\r\n  useEffect(() => {\r\n    const updatedWorks = state.works.map((module) => {\r\n      const updatedBlocks = module.blocks.map((block) => {\r\n        const totalTasks = block.days.reduce(\r\n          (acc, day) => acc + day.tasks.length,\r\n          0\r\n        );\r\n        const completedTasks = block.days.reduce(\r\n          (acc, day) =>\r\n            acc +\r\n            day.tasks.filter((task) => task.status === 'Completed').length,\r\n          0\r\n        );\r\n\r\n        return {\r\n          ...block,\r\n          totalTasks,\r\n          completedTasks,\r\n        };\r\n      });\r\n\r\n      return {\r\n        ...module,\r\n        blocks: updatedBlocks,\r\n      };\r\n    });\r\n\r\n    const totalTasks = updatedWorks.reduce(\r\n      (acc, module) =>\r\n        acc +\r\n        module.blocks.reduce(\r\n          (blockAcc, block) => blockAcc + block.totalTasks,\r\n          0\r\n        ),\r\n      0\r\n    );\r\n\r\n    const completedTasks = updatedWorks.reduce(\r\n      (acc, module) =>\r\n        acc +\r\n        module.blocks.reduce(\r\n          (blockAcc, block) => blockAcc + block.completedTasks,\r\n          0\r\n        ),\r\n      0\r\n    );\r\n\r\n    setCompletedT(completedTasks);\r\n    setTotal(totalTasks);\r\n    const percentage = (completedTasks / totalTasks) * 100;\r\n    setProgress(percentage);\r\n  }, [state.works]);\r\n  const updateTaskStatus = (taskIndex, newStatus) => {\r\n    dispatch({\r\n      type: 'UPDATE_TASK_STATUS',\r\n      payload: {\r\n        taskIndex,\r\n        newStatus,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StoreContext.Provider\r\n      value={{ state, dispatch, updateTaskStatus, progress, total, completedT }}\r\n    >\r\n      {children}\r\n    </StoreContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACtE,OAAOC,OAAO,IAAIC,YAAY,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,OAAO,MAAMC,YAAY,gBAAGR,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMS,aAAa,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACxC,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,UAAU,CAACE,OAAO,EAAEC,YAAY,CAAC;EAC3D,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EAC/CF,SAAS,CAAC,MAAM;IACdoB,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACX,KAAK,CAACY,KAAK,CAAC,CAAC;EAC5D,CAAC,EAAE,CAACZ,KAAK,CAACY,KAAK,CAAC,CAAC;EACjB;EACAxB,SAAS,CAAC,MAAM;IACd,MAAMyB,YAAY,GAAGb,KAAK,CAACY,KAAK,CAACE,GAAG,CAAEC,MAAM,IAAK;MAC/C,MAAMC,aAAa,GAAGD,MAAM,CAACE,MAAM,CAACH,GAAG,CAAEI,KAAK,IAAK;QACjD,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,MAAM,CAClC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACC,KAAK,CAACC,MAAM,EACpC,CACF,CAAC;QACD,MAAMC,cAAc,GAAGR,KAAK,CAACE,IAAI,CAACC,MAAM,CACtC,CAACC,GAAG,EAAEC,GAAG,KACPD,GAAG,GACHC,GAAG,CAACC,KAAK,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,MAAM,KAAK,WAAW,CAAC,CAACJ,MAAM,EAChE,CACF,CAAC;QAED,OAAO;UACL,GAAGP,KAAK;UACRC,UAAU;UACVO;QACF,CAAC;MACH,CAAC,CAAC;MAEF,OAAO;QACL,GAAGX,MAAM;QACTE,MAAM,EAAED;MACV,CAAC;IACH,CAAC,CAAC;IAEF,MAAMG,UAAU,GAAGN,YAAY,CAACQ,MAAM,CACpC,CAACC,GAAG,EAAEP,MAAM,KACVO,GAAG,GACHP,MAAM,CAACE,MAAM,CAACI,MAAM,CAClB,CAACS,QAAQ,EAAEZ,KAAK,KAAKY,QAAQ,GAAGZ,KAAK,CAACC,UAAU,EAChD,CACF,CAAC,EACH,CACF,CAAC;IAED,MAAMO,cAAc,GAAGb,YAAY,CAACQ,MAAM,CACxC,CAACC,GAAG,EAAEP,MAAM,KACVO,GAAG,GACHP,MAAM,CAACE,MAAM,CAACI,MAAM,CAClB,CAACS,QAAQ,EAAEZ,KAAK,KAAKY,QAAQ,GAAGZ,KAAK,CAACQ,cAAc,EACpD,CACF,CAAC,EACH,CACF,CAAC;IAEDnB,aAAa,CAACmB,cAAc,CAAC;IAC7BrB,QAAQ,CAACc,UAAU,CAAC;IACpB,MAAMY,UAAU,GAAIL,cAAc,GAAGP,UAAU,GAAI,GAAG;IACtDhB,WAAW,CAAC4B,UAAU,CAAC;EACzB,CAAC,EAAE,CAAC/B,KAAK,CAACY,KAAK,CAAC,CAAC;EACjB,MAAMoB,gBAAgB,GAAGA,CAACC,SAAS,EAAEC,SAAS,KAAK;IACjDjC,QAAQ,CAAC;MACPkC,IAAI,EAAE,oBAAoB;MAC1BC,OAAO,EAAE;QACPH,SAAS;QACTC;MACF;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACExC,OAAA,CAACC,YAAY,CAAC0C,QAAQ;IACpBC,KAAK,EAAE;MAAEtC,KAAK;MAAEC,QAAQ;MAAE+B,gBAAgB;MAAE9B,QAAQ;MAAEE,KAAK;MAAEE;IAAW,CAAE;IAAAP,QAAA,EAEzEA;EAAQ;IAAAwC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC5C,EAAA,CA9EWF,aAAa;AAAA+C,EAAA,GAAb/C,aAAa;AAAA,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}